{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/contains(_:)-3kdd2","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/map(_:)-6zjdz","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/split(separator:maxsplits:omittingemptysubsequences:)-2y08u","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/split(separator:maxsplits:omittingemptysubsequences:)-3uykj","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/subscript(_:)","title":"subscript(Int) -> Element","type":"subscript"}],"path":"\/documentation\/matrix\/matrix\/columnslice\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/iterator\/next()","title":"func next() -> Element?","type":"method"}],"path":"\/documentation\/matrix\/matrix\/columnslice\/iterator","title":"Matrix.ColumnSlice.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/contains(_:)-9angx","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/flatmap(_:)-7nizn","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/flatmap(_:)-8ah6n","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/joined(separator:)-5qn8q","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/joined(separator:)-5yoza","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/makeiterator()","title":"func makeIterator() -> Matrix<Element>.ColumnSlice.Iterator","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/map(_:)-9l5q4","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/split(separator:maxsplits:omittingemptysubsequences:)-8pjje","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/columnslice\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/matrix\/matrix\/columnslice\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrix\/columnslice","title":"Matrix.ColumnSlice","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/contains(_:)-63mb5","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/map(_:)-3bt2p","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/split(separator:maxsplits:omittingemptysubsequences:)-6wxr0","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/split(separator:maxsplits:omittingemptysubsequences:)-7t16g","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/subscript(_:)","title":"subscript(Int) -> Element","type":"subscript"}],"path":"\/documentation\/matrix\/matrix\/rowslice\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/contains(_:)-398r","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/flatmap(_:)-4o7kj","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/flatmap(_:)-812gw","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/joined(separator:)-1c0s0","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/joined(separator:)-6txf2","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/makeiterator()","title":"func makeIterator() -> ArraySlice<Element>.Iterator","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/map(_:)-1nfnk","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/split(separator:maxsplits:omittingemptysubsequences:)-2y1w4","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/matrix\/matrix\/rowslice\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/matrix\/matrix\/rowslice\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrix\/rowslice","title":"Matrix.RowSlice","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/*(_:_:)","title":"static func * (Matrix<Element>, Matrix<Element>) throws -> Matrix<Element>","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/init(column:)","title":"init(column: [Element])","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(diogonal:)","title":"init(diogonal: [Element])","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(diogonalrepeating:count:)","title":"init(diogonalRepeating: Element, count: Int)","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(row:)","title":"init(row: [Element])","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(rows:)","title":"init(rows: [[Element]]) throws","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(rows:columns:elements:)-79luy","title":"init<C>(rows: Int, columns: Int, elements: C) throws","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(rows:columns:elements:)-8fxeh","title":"init(rows: Int, columns: Int, elements: [Element]) throws","type":"init"},{"path":"\/documentation\/matrix\/matrix\/init(rows:columns:repeating:)","title":"init(rows: Int, columns: Int, repeating: Element)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/array","title":"var array: [[Element]]","type":"property"},{"path":"\/documentation\/matrix\/matrix\/columnscount","title":"var columnsCount: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/flattenarray","title":"var flattenArray: [Element]","type":"property"},{"path":"\/documentation\/matrix\/matrix\/issquare","title":"var isSquare: Bool","type":"property"},{"path":"\/documentation\/matrix\/matrix\/rowscount","title":"var rowsCount: Int","type":"property"},{"path":"\/documentation\/matrix\/matrix\/size","title":"let size: MatrixSize","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/determinant()","title":"func determinant() throws -> Element","type":"method"},{"path":"\/documentation\/matrix\/matrix\/inversed()","title":"func inversed() throws -> Matrix<Element>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/map(_:)","title":"func map<NewElement>((Element) throws -> NewElement) rethrows -> Matrix<NewElement>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/mean(axis:)","title":"func mean(axis: MatrixAxis) -> Matrix<Element>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/matrix\/matrix\/reduce(axis:_:_:)","title":"func reduce<Result>(axis: MatrixAxis, Result, (Result, Element) throws -> Result) rethrows -> Matrix<Result>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/reduce(axis:into:_:)","title":"func reduce<Result>(axis: MatrixAxis, into: Result, (inout Result, Element) throws -> Void) rethrows -> Matrix<Result>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Element) throws -> Void) rethrows -> Result","type":"method"},{"path":"\/documentation\/matrix\/matrix\/sum(axis:)","title":"func sum(axis: MatrixAxis) -> Matrix<Element>","type":"method"},{"path":"\/documentation\/matrix\/matrix\/transposed(multiplyby:)","title":"func transposed(multiplyBy: Element) -> Matrix<Element>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/subscript(_:_:)","title":"subscript(Int, Int) -> Element","type":"subscript"},{"path":"\/documentation\/matrix\/matrix\/subscript(column:)","title":"subscript(column _: Int) -> Matrix<Element>.ColumnSlice","type":"subscript"},{"path":"\/documentation\/matrix\/matrix\/subscript(row:)","title":"subscript(row _: Int) -> Matrix<Element>.RowSlice","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrix\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matrix\/matrix\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrix","title":"Matrix","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixerror\/description","title":"let description: String","type":"property"}],"path":"\/documentation\/matrix\/matrixerror","title":"MatrixError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixsize\/init(rows:columns:)","title":"init(rows: Int, columns: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixsize\/columns","title":"let columns: Int","type":"property"},{"path":"\/documentation\/matrix\/matrixsize\/issquare","title":"var isSquare: Bool","type":"property"},{"path":"\/documentation\/matrix\/matrixsize\/rows","title":"let rows: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixsize\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matrix\/matrixsize\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrixsize","title":"MatrixSize","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixaxis\/column","title":"case column","type":"case"},{"path":"\/documentation\/matrix\/matrixaxis\/row","title":"case row","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixaxis\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matrix\/matrixaxis\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrixaxis","title":"MatrixAxis","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixdeterminanterror\/notsquare","title":"case notSquare","type":"case"},{"path":"\/documentation\/matrix\/matrixdeterminanterror\/unknown","title":"case unknown","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixdeterminanterror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/matrix\/matrixdeterminanterror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixdeterminanterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matrix\/matrixdeterminanterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrixdeterminanterror","title":"MatrixDeterminantError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixinverseerror\/notsquare","title":"case notSquare","type":"case"},{"path":"\/documentation\/matrix\/matrixinverseerror\/singularfactor(index:)","title":"case singularFactor(index: Int)","type":"case"},{"path":"\/documentation\/matrix\/matrixinverseerror\/unknown","title":"case unknown","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixinverseerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/matrix\/matrixinverseerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrixinverseerror","title":"MatrixInverseError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixmultiplyerror\/incorrectsize","title":"case incorrectSize","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixmultiplyerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/matrix\/matrixmultiplyerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matrix\/matrixmultiplyerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matrix\/matrixmultiplyerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/matrix\/matrixmultiplyerror","title":"MatrixMultiplyError","type":"enum"}],"path":"\/documentation\/matrix","title":"Matrix","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}